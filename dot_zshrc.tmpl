#!/usr/bin/zsh

#region powerlevel10k-instant-prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
#endregion powerlevel10k-instant-prompt

#region zi-installer
if [[ ! -f $HOME/.zi/bin/zi.zsh ]]; then
  print -P "%F{33}▓▒░ %F{160}Installing (%F{33}z-shell/zi%F{160})…%f"
  command mkdir -p "$HOME/.zi" && command chmod g-rwX "$HOME/.zi"
  command git clone -q --depth=1 --branch "main" https://github.com/z-shell/zi "$HOME/.zi/bin" && \
    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zi/bin/zi.zsh"
autoload -Uz _zi
(( ${+_comps} )) && _comps[zi]=_zi

zicompinit

zi light-mode for \
  z-shell/z-a-meta-plugins \
  @annexes
#endregion zi-installer

#region zi-plugins
zi lucid wait light-mode for \
    atload"_zsh_autosuggest_start" \
        zsh-users/zsh-autosuggestions \
    atinit"typeset -gA FAST_HIGHLIGHT; FAST_HIGHLIGHT[git-cmsg-len]=73; zicompinit; zicdreplay" \
        z-shell/fast-syntax-highlighting

# This plugin provides aliases for tmux and automatically start tmux
if [ "$TERM_PROGRAM" != "vscode" ]; then
    zi wait lucid for \
        atclone"curl -sOL https://github.com/ohmyzsh/ohmyzsh/raw/master/plugins/tmux/tmux.extra.conf" \
        atload'unalias ta tad ts tl tksv tkss' \
            OMZP::tmux
fi

# A collection of LS_COLORS definitions
zi ice atclone"dircolors -b LS_COLORS > clrs.zsh" \
    atpull'%atclone' pick"clrs.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”'
zi light trapd00r/LS_COLORS

zi ice depth=1; zi light romkatv/powerlevel10k
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Extendable version manager with support for Ruby, Node.js, Elixir, Erlang & more
zi ice as"program" ver"v0.8.1" src"asdf.sh"
zi light asdf-vm/asdf
## alternatives for GNU coreutils
# /bin/cat: A cat(1) clone with wings.
zi ice as"command" from"gh-r" mv"bat*/bat -> bat" pick"bat"
zi light sharkdp/bat
# /bin/ls: A modern replacement for 'ls'.
zi ice as"command" from"gh-r" pick"bin/exa" mv"completions/*.zsh -> _exa"
zi light ogham/exa
# /usr/bin/du: A more intuitive version of du in rust
zi ice as"command" from"gh-r" mv"dust*unknown-linux-gnu/dust -> dust" pick"dust"
zi light bootandy/dust
## alternatives for GNU findutils
# /usr/bin/find: A simple, fast and user-friendly alternative to 'find'
zi ice as"command" from"gh-r" mv"fd* -> fd" bpick"*x86_64-unknown-linux-gnu*" pick"fd/fd"
zi light sharkdp/fd
## alternative for GNU diffutils
# A viewer for git and diff output
zi ice as"command" from"gh-r" mv"*x86_64-unknown-linux-gnu/delta -> delta" bpick"*x86_64-unknown-linux-gnu*" pick"delta"
zi light dandavison/delta
## alternative for grep
# /bin/grep: ripgrep recursively searches directories for a regex pattern while respecting your gitignore
zi ice as"command" from"gh-r" mv"ripgrep* -> ripgrep" pick"ripgrep/rg"
zi light BurntSushi/ripgrep
## alternative for sed
# /bin/sed: Intuitive find & replace CLI (sed alternative)
zi ice as"command" from"gh-r" mv"sd* -> sd" pick"sd"
zi light chmln/sd
## alternative for procps
# /bin/ps: A modern replacement for ps written in Rust
zi ice as"command" from"gh-r" bpick"*lnx*"
zi light dalance/procs
## benchmarktools
# A command-line benchmarking tool
zi ice as"command" from"gh-r" mv"hyperfine*/hyperfine -> hyperfine" pick"sharkdp/hyperfine"
zi light sharkdp/hyperfine
# It's like curl -v, with graphs and colors
zi ice as"command" cp"httpstat.sh -> httpstat" pick"httpstat"
zi light b4b4r07/httpstat
# Simple command-line snippet manager, written in Go.
zi ice as"command" from"gh-r" bpick"pet_*_linux_amd64.tar.gz" pick"pet"
zi light knqyf263/pet
# Remote repository management made easy
zi ice from"gh-r" as"command" pick"*/ghq"
zi light x-motemen/ghq
## utilities
# A git credential helper for 1Password
zi ice as"command" from"gh-r" pick"git-credential-1password"
zi light develerik/git-credential-1password
# A very fast implementation of tldr in Rust.
zi ice as"command" from"gh-r" mv"tldr* -> tldr" pick"tldr"
zi light dbrgn/tealdeer
# A command-line tool and library for generating regular expressions from user-provided test cases
zi ice as"command" from"gh-r" pick"pemistahl/grex"
zi light pemistahl/grex
# GitHub’s official command line tool
zi ice as"command" from"gh-r" pick"usr/bin/gh"
zi light "cli/cli"
zi light-mode lucid wait has"gh" for \
    id-as"gh-completion" \
    as"completion" \
    atclone"gh completion -s zsh > _gh" \
    atpull"%atclone" \
    z-shell/null
# Remote repository management made easy
zi ice from"gh-r" as"command" pick"*/ghq"
zi light x-motemen/ghq
## completions
# A command-line fuzzy finder
zi ice from"gh-r" as"command"
zi light junegunn/fzf
zi ice id-as"junegunn/fzf-tmux" as"command" pick"bin/fzf-tmux"
zi light junegunn/fzf
zi ice id-as"junegunn/fzf-completions" mv"shell/completion.zsh -> _fzf" src"shell/key-bindings.zsh" pick"/dev/null"
zi light junegunn/fzf
# Guard offers a policy-as-code domain-specific language (DSL) to write rules and validate JSON- and YAML-formatted data such as CloudFormation Templates, K8s configurations, and Terraform JSON plans/configurations against those rules.
zi ice as"command" from"gh-r" bpick"*ubuntu*" mv"cfn-guard-v2-ubuntu-latest/cfn-guard -> cfn-guard" pick"cfn-guard"
zi load aws-cloudformation/cloudformation-guard
# The AWS Amplify CLI is a toolchain for simplifying serverless web and mobile development.
zi ice as"command" from"gh-r" bpick"*linux*" mv"amplify* -> amplify" pick"amplify" ver="tag/$(curl -sL https://api.github.com/repos/aws-amplify/amplify-cli/releases/latest | jq -r .tag_name)"
zi light aws-amplify/amplify-cli
# Kubernetes uses a command line utility called kubectl for communicating with the cluster API server
zi ice id-as="kubectl" as"command"
zi snippet https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
zi light-mode lucid wait has"kubectl" for \
    id-as"kubectl-completion" \
    as"completion" \
    atclone"kubectl completion zsh > _kubectl" \
    atpull"%atclone" \
    z-shell/null
# The eksctl command line utility provides the fastest and easiest way to create a new cluster with nodes for Amazon EKS
zi ice from"gh-r" as"command" pick"eksctl"
zi light weaveworks/eksctl
zi light-mode lucid wait has"eksctl" for \
    id-as"eksctl-completion" \
    as"completion" \
    atclone"eksctl completion zsh > _eksctl" \
    atpull"%atclone" \
    z-shell/null
# Replace zsh's default completion selection menu with fzf!
#zi ice wait"1" lucid
#zi light Aloxaf/fzf-tab
# enable cdr
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}"
zstyle ':chpwd:*' recent-dirs-file "${XDG_CACHE_HOME:-$HOME/.cache}/chpwd-recent-dirs"
# peco/percol/fzf wrapper plugin for zsh
zi light mollifier/anyframe
bindkey '^x^b' anyframe-widget-cdr
bindkey '^x^f' anyframe-widget-insert-filename
bindkey '^x^g' anyframe-widget-cd-ghq-repository
bindkey '^x^k' anyframe-widget-kill
bindkey '^x^r' anyframe-widget-put-history
zstyle ":anyframe:selector:" use fzf-tmux
#endregion zi-plugins

#region alias
alias ls='exa --icons --header --time-style long-iso'
alias grep='grep --color=auto'
alias diff='diff --color=auto'
#endregion alias

#region hook
chpwd() ls
#endregion hook

#region changing_directories
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
#endregion changing_directories

#region completion
setopt NO_AUTO_MENU               # 補完時に TAB キーで選択肢を移動しない
setopt LIST_PACKED                # 補完候補を表示する際に表示を詰める
#endregion completion

#region history
setopt APPEND_HISTORY             # zsh が終了した際に HISTFILE を置き換えるのではなく追記する
setopt EXTENDED_HISTORY           # HISTFILE にタイムスタンプを記録する
setopt HIST_EXPIRE_DUPS_FIRST     # 重複する履歴を削除してから保存する
setopt HIST_IGNORE_ALL_DUPS       # 履歴の内容と重複する行を履歴リストに追加しない
setopt HIST_IGNORE_SPACE          # 先頭がスペースで始まる行を履歴に追加しない
setopt HIST_LEX_WORDS             # クォートされた空白を正しく取り扱う
setopt HIST_NO_STORE              # history コマンドを履歴に追加しない
setopt HIST_REDUCE_BLANKS         # 履歴に追加する際に不要な空白を取り除く
setopt HIST_SAVE_NO_DUPS          # HISTFILE に重複する履歴を保存しない
setopt HIST_VERIFY                # 履歴補完した内容を即実行せず行エディタに読み込む
setopt SHARE_HISTORY              # 複数の zsh 間で HISTFILE を共有する
#endregion history

#region zle
setopt NO_BEEP                    # ビープ無効
#endregion zle

#region direnv
eval "$(direnv hook zsh)"
#endregion direnv

#region pipx
if command -v pipx 1>/dev/null 2>&1; then
    autoload -U bashcompinit
    bashcompinit
    eval "$(register-python-argcomplete pipx)"
fi
#endregion pipx

#region docker
service docker status > /dev/null 2>&1
if [ $? = 1 ]; then
    sudo service docker start
fi
#endregion docker
