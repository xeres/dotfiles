#!/usr/bin/zsh

#region powerlevel10k-instant-prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
#endregion powerlevel10k-instant-prompt

#region zi-installer
if [[ ! -f $HOME/.zi/bin/zi.zsh ]]; then
  print -P "%F{33}▓▒░ %F{160}Installing (%F{33}z-shell/zi%F{160})…%f"
  command mkdir -p "$HOME/.zi" && command chmod g-rwX "$HOME/.zi"
  command git clone -q --depth=1 --branch "main" https://github.com/z-shell/zi "$HOME/.zi/bin" && \
    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zi/bin/zi.zsh"
autoload -Uz _zi
(( ${+_comps} )) && _comps[zi]=_zi

zicompinit
#endregion zi-installer

#region zi-plugins
if [ "$TERM_PROGRAM" != "vscode" ]; then
  zi wait lucid for \
    atinit'export ZSH_TMUX_AUTOSTART=true; export ZSH_TMUX_UNICODE=true' \
    atclone'curl -sOL https://github.com/ohmyzsh/ohmyzsh/raw/master/plugins/tmux/tmux.extra.conf' atpull'%atclone' \
    atload'unalias ta tad ts tl tksv tkss' \
      OMZP::tmux
fi

zi lucid wait light-mode for \
  atinit'typeset -gA FAST_HIGHLIGHT; FAST_HIGHLIGHT[git-cmsg-len]=73; zicompinit; zicdreplay' \
    z-shell/fast-syntax-highlighting \
  blockf \
    zsh-users/zsh-completions \
  atload'!_zsh_autosuggest_start' \
    zsh-users/zsh-autosuggestions

zi ice depth'1' atload"[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh" nocd
zi light romkatv/powerlevel10k

zi ice atclone'dircolors -b LS_COLORS > clrs.zsh' \
  atpull'%atclone' pick"clrs.zsh" nocompile'!' \
  atload'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
zi light trapd00r/LS_COLORS

zi ice as'program' from'gh-r' pick'bin/exa' mv'completions/*.zsh -> _exa'
zi light ogham/exa

zi ice as'program' from'gh-r' mv'**/delta -> delta' pick'delta'
zi light dandavison/delta

zi ice src'asdf.sh' \
  atinit'export ASDF_DATA_DIR="$HOME/.local/share/asdf"'
zi light asdf-vm/asdf

function install_asdf_plugin {
  asdf plugin add "$1"
  asdf install "$1" "$2"
  asdf global "$1" "$2"
  asdf reshim "$1" "$2"
}

zi id-as='asdf-direnv' nocompile \
  atclone'
    install_asdf_plugin direnv latest;
    direnv hook zsh > direnv.zsh;
    direnv allow "$HOME"' atpull'%atclone' \
  src'direnv.zsh' \
  for @z-shell/null

zi id-as='asdf-1password-cli' nocompile \
  atclone'install_asdf_plugin 1password-cli latest' atpull'%atclone' \
  for @z-shell/null

zi ice as'program' from'gh-r' pick'git-credential-1password'
zi light develerik/git-credential-1password

zi id-as='asdf-awscli' nocompile \
  atinit'
    autoload bashcompinit
    bashcompinit
    complete -C "$ASDF_DATA_DIR/shims/aws_completer" aws
  ' \
  atclone'install_asdf_plugin awscli latest' atpull'%atclone' \
  for @z-shell/null

zi id-as='asdf-python' nocompile \
  atclone'install_asdf_plugin python 3.9.13' atpull'%atclone' \
  for @z-shell/null

zi id-as='pipx' nocompile \
  atclone'
    python -m pip install --user pipx;
    pipx ensurepath' atpull'%atclone' \
  for @z-shell/null

zi id-as='aws-sam-cli' nocompile \
  atclone'pipx install aws-sam-cli' atpull'%atclone' \
  for @z-shell/null

zi id-as='git-remote-codecommit' nocompile \
  atclone'pipx install git-remote-codecommit' atpull'%atclone' \
  for @z-shell/null

zi ice as'program' from'gh-r' pick'*/ghq' \
  atinit'export GHQ_ROOT="$HOME/repos"'
zi light x-motemen/ghq

zi ice wait lucid as'program' from'gh-r' pick'fzf'
zi light junegunn/fzf

# FIXME: completion does not work properly
zi ice id-as='junegunn/fzf-extras' wait lucid as'program' pick'bin/fzf-tmux' src='shell/key-bindings.zsh' mv'shell/completion.zsh > _fzf'
zi light junegunn/fzf
# "^R" fzf-history-widget
# "^T" fzf-file-widget
# "^[c" fzf-cd-widget

autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}"
zstyle ':chpwd:*' recent-dirs-file "${XDG_CACHE_HOME:-$HOME/.cache}/chpwd-recent-dirs"

zi light mollifier/anyframe
zstyle ":anyframe:selector:" use fzf-tmux

bindkey '^@' anyframe-widget-cdr
bindkey '^x^a' anyframe-widget-git-add
bindkey '^x^b' anyframe-widget-checkout-git-branch
bindkey '^x^f' anyframe-widget-insert-filename
bindkey '^x^g' anyframe-widget-cd-ghq-repository
bindkey '^x^k' anyframe-widget-kill
bindkey '^x^r' anyframe-widget-put-history
#endregion zi-plugins

#region alias
if (( $+commands[exa] )); then
  alias ls='exa --header --time-style long-iso'
else
  alias ls='ls --color=auto --file-type --time-style long-iso'
fi
alias grep='grep --color=auto'
alias diff='diff --color=auto'
#endregion alias

#region hook
chpwd() ls
#endregion hook

#region changing_directories
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
#endregion changing_directories

#region completion
setopt NO_AUTO_MENU               # 補完時に TAB キーで選択肢を移動しない
setopt LIST_PACKED                # 補完候補を表示する際に表示を詰める
#endregion completion

#region history
setopt APPEND_HISTORY             # zsh が終了した際に HISTFILE を置き換えるのではなく追記する
setopt EXTENDED_HISTORY           # HISTFILE にタイムスタンプを記録する
setopt HIST_EXPIRE_DUPS_FIRST     # 重複する履歴を削除してから保存する
setopt HIST_IGNORE_ALL_DUPS       # 履歴の内容と重複する行を履歴リストに追加しない
setopt HIST_IGNORE_SPACE          # 先頭がスペースで始まる行を履歴に追加しない
setopt HIST_LEX_WORDS             # クォートされた空白を正しく取り扱う
setopt HIST_NO_STORE              # history コマンドを履歴に追加しない
setopt HIST_REDUCE_BLANKS         # 履歴に追加する際に不要な空白を取り除く
setopt HIST_SAVE_NO_DUPS          # HISTFILE に重複する履歴を保存しない
setopt HIST_VERIFY                # 履歴補完した内容を即実行せず行エディタに読み込む
setopt SHARE_HISTORY              # 複数の zsh 間で HISTFILE を共有する
#endregion history

#region zle
setopt NO_BEEP                    # ビープ無効
#endregion zle

#region docker
if (( $+commands[docker] )); then
  if [ -f /var/run/docker.sock ]; then
    sudo service docker start
  fi
fi
#endregion docker
